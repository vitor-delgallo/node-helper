const VDDateHelper=require("./date.min.js"),VDFileHelper=require("./file.min.js"),VDStringHelper=require("./string.min.js"),VDNumberHelper=require("./number.min.js"),VDGenericHelper=require("./generic.min.js"),VDGithubHelper=require("./github.min.js"),fs=require("fs"),path=require("path");require("dotenv").config();class VDLogHelper{static get CONFIGS(){const e=process.env.VD_LOG_GC_DIVISOR??0;let s={PATH_LOGS:path.join(process.cwd(),process.env.VD_LOG_FOLDERNAME??"logs")+path.sep,LOG_EXT:process.env.VD_LOG_EXTENSION??".log",NOW:VDDateHelper.getNow(process.env.VD_LOG_TIMEZONE??"America/Sao_Paulo","YYYY-MM-DD"),FILE_COUNT:1,MAX_SIZE_MB:process.env.VD_LOG_MAXSIZEMB_PER_FILE??300,LOG_LIMIT_TYPE:process.env.VD_LOG_LIMIT_UNITY??"days",LOG_LIMIT:process.env.VD_LOG_LIMIT_VALUE??7,GC:{PROBABILITY:process.env.VD_LOG_GC_PROBABILITY??5,DIVISOR:e<=0?100:e},INTEGRATIONS:{GITHUB:!!process.env.VD_LOG_AUTO_SEND_GITHUB}};const r=1024*s.MAX_SIZE_MB*1024;try{if(fs.existsSync(s.PATH_LOGS)){fs.readdirSync(s.PATH_LOGS).forEach((e=>{e.endsWith(s.LOG_EXT)&&e.startsWith(s.NOW)&&VDFileHelper.getFileSize(path.join(s.PATH_LOGS,e))>r&&s.FILE_COUNT++}))}}catch(e){console.error("Erro ao verificar arquivos no diretÃ³rio de logs:",e)}return s.FILE_NAME=s.NOW+"-"+s.FILE_COUNT+s.LOG_EXT,s.FILE_PATH=path.join(s.PATH_LOGS,s.FILE_NAME),s}static get LOG_LIMIT_MS(){let e=0;switch(this.CONFIGS.LOG_LIMIT_TYPE.toLowerCase()){case"d":case"day":case"days":e=24*this.CONFIGS.LOG_LIMIT*60*60*1e3;break;case"h":case"hour":case"hours":e=60*this.CONFIGS.LOG_LIMIT*60*1e3;break;case"m":case"min":case"mins":case"minute":case"minutes":e=60*this.CONFIGS.LOG_LIMIT*1e3;break;case"s":case"sec":case"secs":case"second":case"seconds":e=1e3*this.CONFIGS.LOG_LIMIT}return e}static showMessageError(){console.error("[31m%s[0m","NÃ£o foi possÃ­vel inicializar o sistema de logs! Por favor, verifique as permissÃµes de pastas! O integrador possui direitos administrativos?")}static initialize(){return!!VDFileHelper.createFolder(this.CONFIGS.PATH_LOGS)||(this.showMessageError(),!1)}static async garbageCollector(e=!1){if(!e&&VDNumberHelper.getRandomInt(1,this.CONFIGS.GC.DIVISOR)>this.CONFIGS.GC.PROBABILITY)return!1;try{const e=fs.readdirSync(this.CONFIGS.PATH_LOGS),s=Date.now();for(const r of e){const e=path.join(this.CONFIGS.PATH_LOGS,r),i=fs.statSync(e);if(s-i.mtime.getTime()>this.LOG_LIMIT_MS)if(this.CONFIGS.INTEGRATIONS.GITHUB){await VDGithubHelper.uploadFile("LMSync","main",e,r)&&fs.unlinkSync(e)}else fs.unlinkSync(e)}return!0}catch(e){return this.showMessageError(),!1}}static async add(e,s){if(this.initialize(),e&&e.length>0){const r=VDDateHelper.getNow("America/Sao_Paulo","YYYY-MM-DD HH:mm:ss")+" "+s+" > "+e+"\n",i=this.CONFIGS.FILE_PATH,t=i.substring(i.split("\\").join("/").lastIndexOf("/")+1);VDFileHelper.appendStringToFile(i,r)?this.CONFIGS.INTEGRATIONS.GITHUB&&await VDGithubHelper.uploadFile("LMSync","main",i,t):this.showMessageError()}await this.garbageCollector()}static async addInfo(e){await this.add(VDStringHelper.removeTags(e),"INFO")}static async addWarning(e){await this.add(VDStringHelper.removeTags(e),"WARN")}static async addError(e){await this.add(VDStringHelper.removeTags(e),"ERRO")}static async addException(e){await this.add(VDGenericHelper.returnStackTrace(e),"ERRO")}}module.exports=VDLogHelper;