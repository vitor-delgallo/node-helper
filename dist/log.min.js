const VDDateHelper=require("./date.min.js"),VDFileHelper=require("./file.min.js"),VDStringHelper=require("./string.min.js"),VDNumberHelper=require("./number.min.js"),VDGenericHelper=require("./generic.min.js"),VDGithubHelper=require("./github.min.js"),fs=require("fs"),path=require("path");require("dotenv").config();class VDLogHelper{static get CONFIGS(){const e=process.env.VD_LOG_GC_DIVISOR??0;let r={PATH_LOGS:path.join(process.cwd(),process.env.VD_LOG_FOLDERNAME??"logs")+path.sep,LOG_EXT:process.env.VD_LOG_EXTENSION??".log",NOW:VDDateHelper.getNow(process.env.VD_LOG_TIMEZONE??"America/Sao_Paulo","YYYY-MM-DD"),FILE_COUNT:1,MAX_SIZE_MB:process.env.VD_LOG_MAXSIZEMB_PER_FILE??300,LOG_LIMIT_TYPE:process.env.VD_LOG_LIMIT_UNITY??"days",LOG_LIMIT:process.env.VD_LOG_LIMIT_VALUE??7,GC:{PROBABILITY:process.env.VD_LOG_GC_PROBABILITY??5,DIVISOR:e<=0?100:e},INTEGRATIONS:{GITHUB:{ENABLED:!1,BRANCH:process.env.VD_LOG_AUTO_SEND_GITHUB_BRANCH,REPOSITORY:process.env.VD_LOG_AUTO_SEND_GITHUB_REPOSITORY}}};r.INTEGRATIONS.GITHUB.ENABLED=!VDStringHelper.isEmpty(r.INTEGRATIONS.GITHUB.BRANCH)&&!VDStringHelper.isEmpty(r.INTEGRATIONS.GITHUB.REPOSITORY);const s=1024*r.MAX_SIZE_MB*1024;try{if(fs.existsSync(r.PATH_LOGS)){fs.readdirSync(r.PATH_LOGS).forEach((e=>{e.endsWith(r.LOG_EXT)&&e.startsWith(r.NOW)&&VDFileHelper.getFileSize(path.join(r.PATH_LOGS,e))>s&&r.FILE_COUNT++}))}}catch(e){console.error("Error checking log directory files:",e)}return r.FILE_NAME=r.NOW+"-"+r.FILE_COUNT+r.LOG_EXT,r.FILE_PATH=path.join(r.PATH_LOGS,r.FILE_NAME),r}static get LOG_LIMIT_MS(){let e=0;switch(this.CONFIGS.LOG_LIMIT_TYPE.toLowerCase()){case"d":case"day":case"days":e=24*this.CONFIGS.LOG_LIMIT*60*60*1e3;break;case"m":case"month":case"months":e=30*this.CONFIGS.LOG_LIMIT*24*60*60*1e3}return e}static showMessageError(){console.error("[31m%s[0m","Failed to initialize the log system! Please check folder permissions! Does the integrator have administrative rights?")}static initialize(){return!!VDFileHelper.createFolder(this.CONFIGS.PATH_LOGS)||(this.showMessageError(),!1)}static async garbageCollector(e=!1){if(!e&&VDNumberHelper.getRandomInt(1,this.CONFIGS.GC.DIVISOR)>this.CONFIGS.GC.PROBABILITY)return!1;try{const e=fs.readdirSync(this.CONFIGS.PATH_LOGS),r=Date.now();for(const s of e){const e=path.join(this.CONFIGS.PATH_LOGS,s),t=fs.statSync(e);if(r-t.mtime.getTime()>this.LOG_LIMIT_MS)if(this.CONFIGS.INTEGRATIONS.GITHUB.ENABLED){await VDGithubHelper.uploadFile(this.CONFIGS.INTEGRATIONS.GITHUB.REPOSITORY,this.CONFIGS.INTEGRATIONS.GITHUB.BRANCH,e,s)&&fs.unlinkSync(e)}else fs.unlinkSync(e)}return!0}catch(e){return this.showMessageError(),!1}}static async add(e,r){if(this.initialize(),await this.garbageCollector(),!e)return"";const s=(VDDateHelper.getNow(process.env.VD_LOG_TIMEZONE??"America/Sao_Paulo","YYYY-MM-DD HH:mm:ss")+" "+r+" > {{MESSAGE}}\n").replace("{{MESSAGE}}",e),t=this.CONFIGS.FILE_PATH,i=t.substring(t.split("\\").join("/").lastIndexOf("/")+1);return VDFileHelper.appendStringToFile(t,s)?this.CONFIGS.INTEGRATIONS.GITHUB.ENABLED&&await VDGithubHelper.uploadFile(this.CONFIGS.INTEGRATIONS.GITHUB.REPOSITORY,this.CONFIGS.INTEGRATIONS.GITHUB.BRANCH,t,i):this.showMessageError(),s}static async addInfo(e){return this.add(VDStringHelper.removeTags(e),"INFO")}static async addWarning(e){return this.add(VDStringHelper.removeTags(e),"WARN")}static async addError(e){return this.add(VDStringHelper.removeTags(e),"ERROR")}static async addException(e){return this.add(VDGenericHelper.returnStackTrace(e),"ERROR")}}module.exports=VDLogHelper;